<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userInfoDao">

	<insert id="batchInsertUserInfo" useGeneratedKeys="true"
		keyProperty="id">
		insert into t_user_2
		(name,address)
		values
		<foreach collection="list" item="user" index="index"
			separator=",">
			(#{user.name},#{user.address})
		</foreach>
	</insert>

	<insert id="insertUserInfo" parameterType="com.xiaogua.better.bean.UserNameInfo"
		useGeneratedKeys="true" keyProperty="id">
		insert into t_user_2
		(name,address)
		values
		(#{name},#{address})
	</insert>

	<select id="selectValueAfterSleep" resultType="java.util.Map">
		select sleep(5) as
		rtnValue
		from dual
	</select>

	<select id="selectUserInfoList" parameterType="java.util.Map"
		resultType="java.util.Map">
		select * from t_user_2 where instr(name,#{name})>0
	</select>

	<update id="batchUpdateUserInfo" parameterType="java.util.List">
		<foreach collection="list" item="item" index="index" open=""
			close="" separator=";">
			update
			t_user_3
			<set>
				name = #{item.name},
				address =
				#{item.address}
			</set>
			where
			id = #{item.id}
		</foreach>
	</update>

	<update id="updateUserInfo" parameterType="java.util.Map">
		update
		t_user_3
		<set>
			name = #{name},
			address =#{address}
		</set>
		where
		id = #{id}
	</update>

	<select id="selectUserInfoTotalNum" parameterType="java.util.Map"
		resultType="java.lang.Integer">
		select count(*) from t_user_2 where instr(name,#{name})>0
	</select>

	<select id="queryUserInfoByChoose" parameterType="java.util.Map"
		resultType="java.util.Map">
		select * from t_user_2
		<where>
			<choose>
				<when test="status=='0'.toString()">
					name=#{name_1}
				</when>
				<when test="status=='1'.toString()">
					name=#{name_2}
				</when>
				<otherwise>
					name=#{name_3}
				</otherwise>
			</choose>
		</where>
	</select>

	<sql id="getUserInfoField">
		<trim prefix="," suffixOverrides=",">
			<if test="@com.xiaogua.better.str.StringCommonUtils@isNotNull(address)">
				address,
			</if>
			<if test="status != null and status != 'null' and status !='' ">
				status
			</if>
		</trim>
	</sql>

	<sql id="getUserInfoValue">
		<trim prefix="," suffixOverrides=",">
			<if test="@com.xiaogua.better.str.StringCommonUtils@isNotNull(address)">
				#{address},
			</if>
			<if test="status != null and status != 'null' and status !='' ">
				#{status}
			</if>
		</trim>
	</sql>

	<insert id="saveUserInfo" parameterType="java.util.Map">
		insert into t_user_2(name
		<include refid="getUserInfoField" />
		)
		values(#{name}
		<include refid="getUserInfoValue" />
		)
	</insert>

	<select id="queryUserInfoByName" parameterType="java.lang.String"
		resultType="java.util.Map">
		select * from t_user_2
		<where>
			<choose>
				<when
					test="@com.xiaogua.better.str.StringCommonUtils@isNotEmpty(_parameter)">
					name=#{name}
				</when>
				<otherwise>
					name is null
				</otherwise>
			</choose>
		</where>
	</select>


	<select id="checkUserNameExist" parameterType="java.util.Map"
		resultType="java.lang.Integer">
		select 1 from t_user_2 where name=#{name} limit 0,1
	</select>

	<insert id="saveUserInfoWithIgnoreExistName" parameterType="java.util.Map">
		insert ignore into t_user_3(name,address)
		values(#{name},#{address})
	</insert>

	<insert id="saveUserInfoWithUpdateExistValue" parameterType="java.util.Map">
		insert into t_user_3(name,address)
		values(#{name},#{address})
		on
		duplicate key update address=#{address}
	</insert>

	<insert id="saveUserInfoWithReplaceExistValue" parameterType="java.util.Map">
		replace into t_user_3(name,address)
		values(#{name},#{address})
	</insert>


	<select id="getUserNameList" parameterType="java.util.List"
		resultType="java.lang.String">
		select name from t_user_2
		<if test="list != null and list.size() > 0">
			where id in
			<foreach item="item" index="index" collection="list" open="("
				separator="," close=")">
				#{item}
			</foreach>
		</if>
	</select>

	<select id="queryUserNameWithLike" parameterType="java.lang.String"
		resultType="java.lang.String">
		select name from t_user_2 where name like
		concat('%',#{name},'%')
	</select>

	<select id="selectUserInfoNoOrder" parameterType="java.util.Map"
		resultType="java.util.Map">
		select * from t_user_2 order by null
	</select>


</mapper>